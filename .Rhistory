knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(knitr)
library(ggplot2)
library(readxl)
library(lubridate)
library(fpp2)
library(zoo)
library(TTR)
library(tseries)
vandalismo <- read_excel("vandalismo.xlsx")
Fecha <- seq(as.Date("2021-01-01"), as.Date("2022-10-26"), by = "days", each = 1)
datos_sumados <- aggregate(Calificación ~ Fecha, data = vandalismo, sum)
grafico <- ggplot(datos_sumados, aes(x = Fecha, y = Calificación)) +
geom_line() +    # Línea para conectar los puntos
geom_point() +   # Puntos en cada fecha
labs(x = "Fecha", y = "Número de Casos", title = "Casos de Vandalismo por Fecha") +
theme_bw()
print(grafico)
# Función de promedio móvil en un intervalo
promedio_movil <- function(datos_sumados, Calificación, intervalo) {
datos_sumados %>%
mutate(promedio = rollmean(Calificación, intervalo, fill = NA))
}
# Calcular promedio móvil con intervalo de 7 días
data_con_promedio <- promedio_movil(datos_sumados, "Calificación", 7)
knitr::kable(head(data_con_promedio, 50), caption = "Base de Datos Vandalismos FLOTA")
#data_con_promedio
# Gráfico de Aproximación en Promedio Móvil
ggplot() +
geom_line(data = datos_sumados, aes(x = Fecha, y = Calificación), color = "blue", linetype = "solid") +
geom_line(data = data_con_promedio, aes(x = Fecha, y = promedio), color = "red", linetype = "dashed") +
labs(title = "Aproximación en Promedio Móvil", x = "Fecha", y = "Valor") +
theme_minimal()
# Calculo de los rezagos
calcular_rezagos <- function(datos_sumados, Calificación, pasos) {
datos_sumados %>%
mutate(across(.cols = Calificación, .fns = list(lag = ~lag(., pasos)), .names = "{col}_lag{pasos}"))
}
# Calcular rezagos de 7 y 14 días
data_con_rezagos <- calcular_rezagos(datos_sumados, "Calificación", 7)
data_con_rezagos <- calcular_rezagos(data_con_rezagos, "Calificación_lag7", 7)
names(data_con_rezagos)
ggplot(data_con_rezagos, aes(x = Fecha)) +
geom_line(aes(y = Calificación, color = "black")) +
geom_line(aes(y = Calificación_lag7, color = "red")) +
labs(title = "Gráfico de Rezagos",
y = "Calificación",
color = "Leyenda") +
scale_color_manual(values = c("Valor original" = "black",
"Rezago 7 días" = "red")) +
theme_minimal()
# Graficar los resultados
ggplot() +
geom_line(data = datos_sumados, aes(x = Fecha, y = Calificación), color = "blue", linetype = "solid") +
geom_line(data = data_con_promedio, aes(x = Fecha, y = promedio), color = "red", linetype = "dashed") +
geom_line(data = data_con_rezagos, aes(x = Fecha, y = Calificación), color = "green", linetype = "dotted") +
geom_line(data = data_con_rezagos, aes(x = Fecha, y = Calificación_lag7), color = "orange", linetype = "dotted") +
labs(title = "Análisis de Variable en el Tiempo", x = "Fecha", y = "Calificación") +
theme_minimal()
# Realizar descomposición de la serie de tiempo
serie_de_tiempo <- ts(datos_sumados$Calificación, frequency = 240)
descomposicion <- decompose(serie_de_tiempo)
# Gráfico de la descomposición
plot(descomposicion)
# Verificar estacionalidad
adf_test <- adf.test(datos_sumados$Calificación)
print(adf_test)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(knitr)
library(ggplot2)
library(readxl)
library(lubridate)
library(fpp2)
library(zoo)
library(TTR)
library(tseries)
vandalismo <- read_excel("vandalismo.xlsx")
Fecha <- seq(as.Date("2021-01-01"), as.Date("2022-10-26"), by = "days", each = 1)
datos_sumados <- aggregate(Calificación ~ Fecha, data = vandalismo, sum)
grafico <- ggplot(datos_sumados, aes(x = Fecha, y = Calificación)) +
geom_line() +    # Línea para conectar los puntos
geom_point() +   # Puntos en cada fecha
labs(x = "Fecha", y = "Número de Casos", title = "Casos de Vandalismo por Fecha") +
theme_bw()
print(grafico)
# Función de promedio móvil en un intervalo
promedio_movil <- function(datos_sumados, Calificación, intervalo) {
datos_sumados %>%
mutate(promedio = rollmean(Calificación, intervalo, fill = NA))
}
# Calcular promedio móvil con intervalo de 7 días
data_con_promedio <- promedio_movil(datos_sumados, "Calificación", 7)
knitr::kable(head(data_con_promedio, 50), caption = "Base de Datos Vandalismos FLOTA")
#data_con_promedio
# Gráfico de Aproximación en Promedio Móvil
ggplot() +
geom_line(data = datos_sumados, aes(x = Fecha, y = Calificación), color = "blue", linetype = "solid") +
geom_line(data = data_con_promedio, aes(x = Fecha, y = promedio), color = "red", linetype = "dashed") +
labs(title = "Aproximación en Promedio Móvil", x = "Fecha", y = "Valor") +
theme_minimal()
# Calculo de los rezagos
calcular_rezagos <- function(datos_sumados, Calificación, pasos) {
datos_sumados %>%
mutate(across(.cols = Calificación, .fns = list(lag = ~lag(., pasos)), .names = "{col}_lag{pasos}"))
}
# Calcular rezagos de 7 y 14 días
data_con_rezagos <- calcular_rezagos(datos_sumados, "Calificación", 7)
data_con_rezagos <- calcular_rezagos(data_con_rezagos, "Calificación_lag7", 7)
names(data_con_rezagos)
ggplot(data_con_rezagos, aes(x = Fecha)) +
geom_line(aes(y = Calificación, color = "black")) +
geom_line(aes(y = Calificación_lag7, color = "red")) +
labs(title = "Gráfico de Rezagos",
y = "Calificación",
color = "Leyenda") +
scale_color_manual(values = c("Valor original" = "black",
"Rezago 7 días" = "red")) +
theme_minimal()
# Graficar los resultados
ggplot() +
geom_line(data = datos_sumados, aes(x = Fecha, y = Calificación), color = "blue", linetype = "solid") +
geom_line(data = data_con_promedio, aes(x = Fecha, y = promedio), color = "red", linetype = "dashed") +
geom_line(data = data_con_rezagos, aes(x = Fecha, y = Calificación), color = "green", linetype = "dotted") +
geom_line(data = data_con_rezagos, aes(x = Fecha, y = Calificación_lag7), color = "orange", linetype = "dotted") +
labs(title = "Análisis de Variable en el Tiempo", x = "Fecha", y = "Calificación") +
theme_minimal()
# Realizar descomposición de la serie de tiempo
serie_de_tiempo <- ts(datos_sumados$Calificación, frequency = 240)
descomposicion <- decompose(serie_de_tiempo)
# Gráfico de la descomposición
plot(descomposicion)
# Verificar estacionalidad
adf_test <- adf.test(datos_sumados$Calificación)
print(adf_test)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(knitr)
library(ggplot2)
library(readxl)
library(lubridate)
library(fpp2)
library(zoo)
library(TTR)
library(tseries)
vandalismo <- read_excel("vandalismo.xlsx")
Fecha <- seq(as.Date("2021-01-01"), as.Date("2022-10-26"), by = "days", each = 1)
datos_sumados <- aggregate(Calificación ~ Fecha, data = vandalismo, sum)
grafico <- ggplot(datos_sumados, aes(x = Fecha, y = Calificación)) +
geom_line() +    # Línea para conectar los puntos
geom_point() +   # Puntos en cada fecha
labs(x = "Fecha", y = "Número de Casos", title = "Casos de Vandalismo por Fecha") +
theme_bw()
print(grafico)
# Función de promedio móvil en un intervalo
promedio_movil <- function(datos_sumados, Calificación, intervalo) {
datos_sumados %>%
mutate(promedio = rollmean(Calificación, intervalo, fill = NA))
}
# Calcular promedio móvil con intervalo de 7 días
data_con_promedio <- promedio_movil(datos_sumados, "Calificación", 7)
knitr::kable(head(data_con_promedio, 50), caption = "Base de Datos Vandalismos FLOTA")
#data_con_promedio
# Gráfico de Aproximación en Promedio Móvil
ggplot() +
geom_line(data = datos_sumados, aes(x = Fecha, y = Calificación), color = "blue", linetype = "solid") +
geom_line(data = data_con_promedio, aes(x = Fecha, y = promedio), color = "red", linetype = "dashed") +
labs(title = "Aproximación en Promedio Móvil", x = "Fecha", y = "Valor") +
theme_minimal()
calcular_rezagos <- function(datos_sumados, Calificación, pasos) {
datos_sumados %>%
mutate(across(.cols = Calificación, .fns = list(lag = ~lag(., pasos)), .names = "{col}_lag{pasos}"))
}
# Calcular rezagos de 7 y 14 días
data_con_rezagos <- calcular_rezagos(datos_sumados, "Calificación", 7)
data_con_rezagos <- calcular_rezagos(data_con_rezagos, "Calificación_lag7", 7)
names(data_con_rezagos)
ggplot(data_con_rezagos, aes(x = Fecha)) +
geom_line(aes(y = Calificación, color = "black")) +
geom_line(aes(y = Calificación_lag7, color = "red")) +
labs(title = "Gráfico de Rezagos",
y = "Calificación",
color = "Leyenda") +
scale_color_manual(values = c("Valor original" = "black",
"Rezago 7 días" = "red")) +
theme_minimal()
# Graficar los resultados
ggplot() +
geom_line(data = datos_sumados, aes(x = Fecha, y = Calificación), color = "blue", linetype = "solid") +
geom_line(data = data_con_promedio, aes(x = Fecha, y = promedio), color = "red", linetype = "dashed") +
geom_line(data = data_con_rezagos, aes(x = Fecha, y = Calificación), color = "green", linetype = "dotted") +
geom_line(data = data_con_rezagos, aes(x = Fecha, y = Calificación_lag7), color = "orange", linetype = "dotted") +
labs(title = "Análisis de Variable en el Tiempo", x = "Fecha", y = "Calificación") +
theme_minimal()
# Realizar descomposición de la serie de tiempo
serie_de_tiempo <- ts(datos_sumados$Calificación, frequency = 240)
descomposicion <- decompose(serie_de_tiempo)
# Gráfico de la descomposición
plot(descomposicion)
# Verificar estacionalidad
adf_test <- adf.test(datos_sumados$Calificación)
print(adf_test)
plot(serie_de_tiempo)
abline(reg = lm(serie_de_tiempo ~ time(serie_de_tiempo)))
# Aplicar suavizamiento exponencial simple
modelo_suavizado <- HoltWinters(serie_de_tiempo, beta = FALSE, gamma = FALSE)
modelo_suavizado
# Hacer pronósticos con suavizamiento exponencial simple
pronosticos_suavizado <- forecast(modelo_suavizado, h = 30)  # Pronóstico para 30 días.
pronosticos_suavizado
Suav_exp <- ses(serie_de_tiempo, h = 15)
autoplot(Suav_exp) + autolayer(fitted(Suav_exp), series="Fitted")
# Instalar y cargar el paquete de suavizamiento exponencial
library(forecast)
# Crear una serie de tiempo con frecuencia diaria
serie_tiempof <- ts(datos_sumados$Calificación, frequency = 2)
mod1 <- HoltWinters(serie_tiempof, seasonal = "additive")
plot(mod1)
knitr::opts_chunk$set(echo = TRUE)
# Hacer pronósticos con suavizamiento exponencial simple
pronosticos_suavizado <- forecast(modelo_suavizado, h = 30)  # Pronóstico para 30 días.
