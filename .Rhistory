# Función de promedio móvil en un intervalo
promedio_movil <- function(datos_sumados, Calificación, intervalo) {
datos_sumados %>%
mutate(promedio = rollmean(Calificación, intervalo, fill = NA))
}
# Calcular promedio móvil con intervalo de 7 días
data_con_promedio <- promedio_movil(datos_sumados, "Calificación", 7)
knitr::kable(head(data_con_promedio, 50), caption = "Base de Datos Vandalismos FLOTA")
#data_con_promedio
# Gráfico de Aproximación en Promedio Móvil
ggplot() +
geom_line(data = datos_sumados, aes(x = Fecha, y = Calificación), color = "blue", linetype = "solid") +
geom_line(data = data_con_promedio, aes(x = Fecha, y = promedio), color = "red", linetype = "dashed") +
labs(title = "Aproximación en Promedio Móvil", x = "Fecha", y = "Valor") +
theme_minimal()
calcular_rezagos <- function(datos_sumados, Calificación, pasos) {
datos_sumados %>%
mutate(across(.cols = Calificación, .fns = list(lag = ~lag(., pasos)), .names = "{col}_lag{pasos}"))
}
# Calcular rezagos de 7 y 14 días
data_con_rezagos <- calcular_rezagos(datos_sumados, "Calificación", 7)
data_con_rezagos <- calcular_rezagos(data_con_rezagos, "Calificación_lag7", 7)
names(data_con_rezagos)
ggplot(data_con_rezagos, aes(x = Fecha)) +
geom_line(aes(y = Calificación, color = "black")) +
geom_line(aes(y = Calificación_lag7, color = "red")) +
labs(title = "Gráfico de Rezagos",
y = "Calificación",
color = "Leyenda") +
scale_color_manual(values = c("Valor original" = "black",
"Rezago 7 días" = "red")) +
theme_minimal()
# Graficar los resultados
ggplot() +
geom_line(data = datos_sumados, aes(x = Fecha, y = Calificación), color = "blue", linetype = "solid") +
geom_line(data = data_con_promedio, aes(x = Fecha, y = promedio), color = "red", linetype = "dashed") +
geom_line(data = data_con_rezagos, aes(x = Fecha, y = Calificación), color = "green", linetype = "dotted") +
geom_line(data = data_con_rezagos, aes(x = Fecha, y = Calificación_lag7), color = "orange", linetype = "dotted") +
labs(title = "Análisis de Variable en el Tiempo", x = "Fecha", y = "Calificación") +
theme_minimal()
# Realizar descomposición de la serie de tiempo
serie_de_tiempo <- ts(datos_sumados$Calificación, frequency = 240)
descomposicion <- decompose(serie_de_tiempo)
# Gráfico de la descomposición
plot(descomposicion)
# Verificar estacionalidad
adf_test <- adf.test(datos_sumados$Calificación)
print(adf_test)
plot(serie_de_tiempo)
abline(reg = lm(serie_de_tiempo ~ time(serie_de_tiempo)))
# Aplicar suavizamiento exponencial simple
modelo_suavizado <- HoltWinters(serie_de_tiempo, beta = FALSE, gamma = FALSE)
modelo_suavizado
# Hacer pronósticos con suavizamiento exponencial simple
pronosticos_suavizado <- forecast(modelo_suavizado, h = 30)
# Pronóstico para 30 días.
pronosticos_suavizado
Suav_exp <- ses(serie_de_tiempo, h = 15)
autoplot(Suav_exp) + autolayer(fitted(Suav_exp), series="Fitted")
# Instalar y cargar el paquete de suavizamiento exponencial
library(forecast)
# Crear una serie de tiempo con frecuencia diaria
serie_tiempof <- ts(datos_sumados$Calificación, frequency = 2)
mod1 <- HoltWinters(serie_tiempof, seasonal = "additive")
plot(mod1)
adf.test(diff(serie_tiempof))
adf.test(diff(serie_tiempof))
modeloARIMA<-auto.arima(diff(serie_tiempof),  seasonal = FALSE)
summary(modeloARIMA)
modelo_arima <- arima(diff(serie_tiempof), order = c(3,0,2))
n_predicciones <- 10
predicciones <- predict(modelo_arima, n.ahead = n_predicciones)
# Visualiza las predicciones
plot(diff(serie_tiempof) , main = "Serie Temporal y Predicciones")
lines(predicciones$pred, col = "red", lty = 2)  # Línea de predicciones
legend("topright", legend = "Predicciones", col = "red", lty = 2)
# Hacer pronósticos con suavizamiento exponencial simple
pronosticos_suavizado <- forecast(modelo_suavizado, h = 20)
# Pronóstico para 30 días.
pronosticos_suavizado
# Hacer pronósticos con suavizamiento exponencial simple
pronosticos_suavizado <- forecast(modelo_suavizado, h = 30)
# Pronóstico para 30 días.
pronosticos_suavizado
Suav_exp <- ses(serie_de_tiempo, h = 15)
autoplot(Suav_exp) + autolayer(fitted(Suav_exp), series="Fitted")
modelo_arima <- arima(diff(serie_tiempof), order = c(3,0,2))
n_predicciones <- 40
predicciones <- predict(modelo_arima, n.ahead = n_predicciones)
# Visualiza las predicciones
plot(diff(serie_tiempof) , main = "Serie Temporal y Predicciones")
lines(predicciones$pred, col = "red", lty = 2)  # Línea de predicciones
legend("topright", legend = "Predicciones", col = "red", lty = 2)
modelo_arima <- arima(diff(serie_tiempof), order = c(3,0,2))
n_predicciones <- 100
predicciones <- predict(modelo_arima, n.ahead = n_predicciones)
# Visualiza las predicciones
plot(diff(serie_tiempof) , main = "Serie Temporal y Predicciones")
lines(predicciones$pred, col = "red", lty = 2)  # Línea de predicciones
legend("topright", legend = "Predicciones", col = "red", lty = 2)
modelo_arima <- arima(diff(serie_tiempof), order = c(3,0,2))
n_predicciones <- 10
predicciones <- predict(modelo_arima, n.ahead = n_predicciones)
# Visualiza las predicciones
plot(diff(serie_tiempof) , main = "Serie Temporal y Predicciones")
lines(predicciones$pred, col = "red", lty = 2)  # Línea de predicciones
legend("topright", legend = "Predicciones", col = "red", lty = 2)
modelo_arima <- arima(diff(serie_tiempof), order = c(4,0,2))
n_predicciones <- 10
predicciones <- predict(modelo_arima, n.ahead = n_predicciones)
# Visualiza las predicciones
plot(diff(serie_tiempof) , main = "Serie Temporal y Predicciones")
lines(predicciones$pred, col = "red", lty = 2)  # Línea de predicciones
legend("topright", legend = "Predicciones", col = "red", lty = 2)
modelo_arima <- arima(diff(serie_tiempof), order = c(4,0,4))
n_predicciones <- 10
predicciones <- predict(modelo_arima, n.ahead = n_predicciones)
modelo_arima <- arima(diff(serie_tiempof), order = c(4,0,2))
n_predicciones <- 10
predicciones <- predict(modelo_arima, n.ahead = n_predicciones)
modelo_arima <- arima(diff(serie_tiempof), order = c(4,0,1))
n_predicciones <- 10
predicciones <- predict(modelo_arima, n.ahead = n_predicciones)
# Visualiza las predicciones
plot(diff(serie_tiempof) , main = "Serie Temporal y Predicciones")
lines(predicciones$pred, col = "red", lty = 2)  # Línea de predicciones
legend("topright", legend = "Predicciones", col = "red", lty = 2)
modelo_arima <- arima(diff(serie_tiempof), order = c(4,0,1))
n_predicciones <- 1000
predicciones <- predict(modelo_arima, n.ahead = n_predicciones)
# Visualiza las predicciones
plot(diff(serie_tiempof) , main = "Serie Temporal y Predicciones")
lines(predicciones$pred, col = "red", lty = 2)  # Línea de predicciones
legend("topright", legend = "Predicciones", col = "red", lty = 2)
modelo_arima <- arima(diff(serie_tiempof), order = c(4,0,1))
n_predicciones <- 50
predicciones <- predict(modelo_arima, n.ahead = n_predicciones)
modelo_arima <- arima(diff(serie_tiempof), order = c(4,0,1))
n_predicciones <- 50
predicciones <- predict(modelo_arima, n.ahead = n_predicciones)
# Visualiza las predicciones
plot(diff(serie_tiempof) , main = "Serie Temporal y Predicciones")
lines(predicciones$pred, col = "red", lty = 2)  # Línea de predicciones
legend("topright", legend = "Predicciones", col = "red", lty = 2)
modelo_arima <- arima(diff(serie_tiempof), order = c(4,0,1))
n_predicciones <- 10
predicciones <- predict(modelo_arima, n.ahead = n_predicciones)
# Visualiza las predicciones
plot(diff(serie_tiempof) , main = "Serie Temporal y Predicciones")
lines(predicciones$pred, col = "red", lty = 2)  # Línea de predicciones
legend("topright", legend = "Predicciones", col = "red", lty = 2)
modelo_arima <- arima(diff(serie_tiempof), order = c(4,0,1))
n_predicciones <- 10
modpredicciones <- predict(modelo_arima, n.ahead = n_predicciones)
# Visualiza las predicciones
plot(diff(serie_tiempof) , main = "Serie Temporal predicción")
lines(modpredicciones$pred, col = "red", lty = 2)  # Línea de predicciones
legend("topright", legend = "Predicciones", col = "red", lty = 2)
# Visualiza las predicciones
plot(diff(serie_tiempof) , main = "Serie Temporal predicción")
lines(modpredicciones$pred, col = "red", lty = 4)  # Línea de predicciones
legend("topright", legend = "Predicción", col = "red", lty = 2)
# Visualiza las predicciones
plot(diff(serie_tiempof) , main = "Serie Temporal predicción")
lines(modpredicciones$pred, col = "red", lty = 10)  # Línea de predicciones
legend("topright", legend = "Predicción", col = "red", lty = 2)
# Visualiza las predicciones
plot(diff(serie_tiempof) , main = "Serie Temporal predicción")
lines(modpredicciones$pred, col = "red", lty = 4)  # Línea de predicciones
legend("topright", legend = "Predicción", col = "red", lty = 4)
inicio_zoom <- 100
fin_zoom <- 200
plot(diff(serie_tiempof), main = "Serie Temporal predicción", xlim = c(inicio_zoom, fin_zoom))
lines(modpredicciones$pred[inicio_zoom:fin_zoom], col = "red", lty = 4)
legend("topright", legend = "Predicción", col = "red", lty = 4)
inicio_zoom <- 300
fin_zoom <- 350
plot(diff(serie_tiempof), main = "Serie Temporal predicción", xlim = c(inicio_zoom, fin_zoom))
lines(modpredicciones$pred[inicio_zoom:fin_zoom], col = "red", lty = 4)
legend("topright", legend = "Predicción", col = "red", lty = 4)
inicio_zoom <- 300
fin_zoom <- 350
plot(diff(serie_tiempof), main = "Zoom Serie Temporal predicción", xlim = c(inicio_zoom, fin_zoom))
lines(modpredicciones$pred[inicio_zoom:fin_zoom], col = "red", lty = 4)
legend("topright", legend = "Predicción", col = "red", lty = 4)
inicio_zoom <- 300
fin_zoom <- 310
plot(diff(serie_tiempof), main = "Zoom Serie Temporal predicción", xlim = c(inicio_zoom, fin_zoom))
lines(modpredicciones$pred[inicio_zoom:fin_zoom], col = "red", lty = 4)
legend("topright", legend = "Predicción", col = "red", lty = 4)
inicio_zoom <- 300
fin_zoom <- 308
plot(diff(serie_tiempof), main = "Zoom Serie Temporal predicción", xlim = c(inicio_zoom, fin_zoom))
lines(modpredicciones$pred[inicio_zoom:fin_zoom], col = "red", lty = 4)
legend("topright", legend = "Predicción", col = "red", lty = 4)
inicio_zoom <- 300
fin_zoom <- 305
plot(diff(serie_tiempof), main = "Zoom Serie Temporal predicción", xlim = c(inicio_zoom, fin_zoom))
lines(modpredicciones$pred[inicio_zoom:fin_zoom], col = "red", lty = 4)
legend("topright", legend = "Predicción", col = "red", lty = 4)
inicio_zoom <- 290
fin_zoom <- 299
plot(diff(serie_tiempof), main = "Zoom Serie Temporal sin predicción", xlim = c(inicio_zoom, fin_zoom))
lines(modpredicciones$pred[inicio_zoom:fin_zoom], col = "red", lty = 4)
legend("topright", legend = "Predicción", col = "red", lty = 4)
inicio_zoom <- 250
fin_zoom <- 299
plot(diff(serie_tiempof), main = "Zoom Serie Temporal sin predicción", xlim = c(inicio_zoom, fin_zoom))
lines(modpredicciones$pred[inicio_zoom:fin_zoom], col = "red", lty = 4)
legend("topright", legend = "Predicción", col = "red", lty = 4)
inicio_zoom <- 292
fin_zoom <- 299
plot(diff(serie_tiempof), main = "Zoom Serie Temporal sin predicción", xlim = c(inicio_zoom, fin_zoom))
lines(modpredicciones$pred[inicio_zoom:fin_zoom], col = "red", lty = 4)
legend("topright", legend = "Predicción", col = "red", lty = 4)
install.packages("forecast")
knitr::opts_chunk$set(echo = TRUE)
plot(diff(serie_tiempof), main = "Serie Tiempo suavizada Winter Holters vs. Modelo ARIMA")
plot(diff(serie_tiempof), main = "Serie Tiempo suavizada Winter Holters vs. Modelo ARIMA")
lines(fitted(modelo_arima), col = "blue",  lwd = 0.5)
plot(diff(serie_tiempof), main = "Serie Tiempo suavizada Winter Holters vs. Modelo ARIMA")
lines(fitted(modelo_arima), col = "blue",  lwd = 0.5)
plot(diff(serie_tiempof), main = "Serie Tiempo suavizada Winter Holters vs. Modelo ARIMA")
lines(fitted(modelo_arima), col = "red",  lwd = 0.5)
plot(diff(serie_tiempof), main = "Serie Tiempo suavizada Winter Holters vs. Modelo ARIMA")
lines(fitted(modelo_arima), col = "red",  lwd = 0.5)
plot(diff(serie_tiempof), main = "Serie Tiempo suavizada Winter Holters vs. Modelo ARIMA")
lines(fitted(modeloARIMA), col = "red",  lwd = 0.5)
plot(diff(serie_tiempof), main = "Serie Tiempo suavizada Winter Holters vs. Modelo ARIMA")
lines(fitted(modeloARIMA), col = "blue",  lwd = 0.5)
plot(diff(serie_tiempof), main = "Serie Tiempo suavizada Winter Holters vs. Modelo ARIMA")
lines(fitted(modeloARIMA), col = "gray",  lwd = 0.5)
plot(diff(serie_tiempof), main = "Serie Tiempo suavizada Winter Holters vs. Modelo ARIMA")
lines(fitted(modeloARIMA), col = "green",  lwd = 0.5)
modelo_arima <- arima(diff(serie_tiempof), order = c(0,0,2))
n_predicciones <- 10
modpredicciones <- predict(modelo_arima, n.ahead = n_predicciones)
plot(diff(serie_tiempof) , main = "Serie Temporal predicción")
lines(modpredicciones$pred, col = "red", lty = 4)  # Línea de predicción
legend("topright", legend = "Predicción", col = "red", lty = 4)
inicio_zoom <- 300
fin_zoom <- 305
plot(diff(serie_tiempof), main = "Zoom Serie Temporal predicción", xlim = c(inicio_zoom, fin_zoom))
lines(modpredicciones$pred[inicio_zoom:fin_zoom], col = "red", lty = 4)
legend("topright", legend = "Predicción", col = "red", lty = 4)
inicio_zoom <- 292
fin_zoom <- 299
plot(diff(serie_tiempof), main = "Zoom Serie Temporal sin predicción", xlim = c(inicio_zoom, fin_zoom))
lines(modpredicciones$pred[inicio_zoom:fin_zoom], col = "red", lty = 4)
legend("topright", legend = "Predicción", col = "red", lty = 4)
plot(diff(serie_tiempof), main = "Serie Tiempo suavizada Winter Holters vs. Modelo ARIMA")
lines(fitted(modeloARIMA), col = "green",  lwd = 0.5)
modeloARIMA <- arima(diff(serie_tiempof), order = c(0,0,2))
n_predicciones <- 10
modpredicciones <- predict(modelo_arima, n.ahead = n_predicciones)
modeloARIMA <- arima(diff(serie_tiempof), order = c(0,0,2))
n_predicciones <- 10
modpredicciones <- predict(modeloARIMA, n.ahead = n_predicciones)
plot(diff(serie_tiempof) , main = "Serie Temporal predicción")
lines(modpredicciones$pred, col = "red", lty = 4)  # Línea de predicción
legend("topright", legend = "Predicción", col = "red", lty = 4)
inicio_zoom <- 300
fin_zoom <- 305
plot(diff(serie_tiempof), main = "Zoom Serie Temporal predicción", xlim = c(inicio_zoom, fin_zoom))
lines(modpredicciones$pred[inicio_zoom:fin_zoom], col = "red", lty = 4)
legend("topright", legend = "Predicción", col = "red", lty = 4)
inicio_zoom <- 292
fin_zoom <- 299
plot(diff(serie_tiempof), main = "Zoom Serie Temporal sin predicción", xlim = c(inicio_zoom, fin_zoom))
lines(modpredicciones$pred[inicio_zoom:fin_zoom], col = "red", lty = 4)
legend("topright", legend = "Predicción", col = "red", lty = 4)
plot(diff(serie_tiempof), main = "Serie Tiempo suavizada Winter Holters vs. Modelo ARIMA")
lines(fitted(modeloARIMA), col = "green",  lwd = 0.5)
plot(diff(serie_tiempof), main = "Serie Tiempo suavizada Winter Holters vs. Modelo ARIMA")
lines(fitted(modeloARIMA), col = "green",  lwd = 0.5)
plot(diff(serie_tiempof), main = "Serie Tiempo suavizada Winter Holters vs. Modelo ARIMA")
lines(fitted(modelo_ARIMA), col = "green",  lwd = 0.5)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(knitr)
library(ggplot2)
library(readxl)
library(lubridate)
library(fpp2)
library(zoo)
library(TTR)
library(tseries)
library(aTSA)
library(forecast)
vandalismo <- read_excel("vandalismo.xlsx")
Fecha <- seq(as.Date("2021-01-01"), as.Date("2022-10-26"), by = "days", each = 1)
datos_sumados <- aggregate(Calificación ~ Fecha, data = vandalismo, sum)
grafico <- ggplot(datos_sumados, aes(x = Fecha, y = Calificación)) +
geom_line() +    # Línea para conectar los puntos
geom_point() +   # Puntos en cada fecha
labs(x = "Fecha", y = "Número de Casos", title = "Casos de Vandalismo por Fecha") +
theme_bw()
print(grafico)
# Función de promedio móvil en un intervalo
promedio_movil <- function(datos_sumados, Calificación, intervalo) {
datos_sumados %>%
mutate(promedio = rollmean(Calificación, intervalo, fill = NA))
}
# Calcular promedio móvil con intervalo de 7 días
data_con_promedio <- promedio_movil(datos_sumados, "Calificación", 7)
knitr::kable(head(data_con_promedio, 50), caption = "Base de Datos Vandalismos FLOTA")
#data_con_promedio
# Gráfico de Aproximación en Promedio Móvil
ggplot() +
geom_line(data = datos_sumados, aes(x = Fecha, y = Calificación), color = "blue", linetype = "solid") +
geom_line(data = data_con_promedio, aes(x = Fecha, y = promedio), color = "red", linetype = "dashed") +
labs(title = "Aproximación en Promedio Móvil", x = "Fecha", y = "Valor") +
theme_minimal()
calcular_rezagos <- function(datos_sumados, Calificación, pasos) {
datos_sumados %>%
mutate(across(.cols = Calificación, .fns = list(lag = ~lag(., pasos)), .names = "{col}_lag{pasos}"))
}
# Calcular rezagos de 7 y 14 días
data_con_rezagos <- calcular_rezagos(datos_sumados, "Calificación", 7)
data_con_rezagos <- calcular_rezagos(data_con_rezagos, "Calificación_lag7", 7)
names(data_con_rezagos)
ggplot(data_con_rezagos, aes(x = Fecha)) +
geom_line(aes(y = Calificación, color = "black")) +
geom_line(aes(y = Calificación_lag7, color = "red")) +
labs(title = "Gráfico de Rezagos",
y = "Calificación",
color = "Leyenda") +
scale_color_manual(values = c("Valor original" = "black",
"Rezago 7 días" = "red")) +
theme_minimal()
# Graficar los resultados
ggplot() +
geom_line(data = datos_sumados, aes(x = Fecha, y = Calificación), color = "blue", linetype = "solid") +
geom_line(data = data_con_promedio, aes(x = Fecha, y = promedio), color = "red", linetype = "dashed") +
geom_line(data = data_con_rezagos, aes(x = Fecha, y = Calificación), color = "green", linetype = "dotted") +
geom_line(data = data_con_rezagos, aes(x = Fecha, y = Calificación_lag7), color = "orange", linetype = "dotted") +
labs(title = "Análisis de Variable en el Tiempo", x = "Fecha", y = "Calificación") +
theme_minimal()
# Realizar descomposición de la serie de tiempo
serie_de_tiempo <- ts(datos_sumados$Calificación, frequency = 240)
descomposicion <- decompose(serie_de_tiempo)
# Gráfico de la descomposición
plot(descomposicion)
# Verificar estacionalidad
adf_test <- adf.test(datos_sumados$Calificación)
print(adf_test)
plot(serie_de_tiempo)
abline(reg = lm(serie_de_tiempo ~ time(serie_de_tiempo)))
# Aplicar suavizamiento exponencial simple
modelo_suavizado <- HoltWinters(serie_de_tiempo, beta = FALSE, gamma = FALSE)
modelo_suavizado
Suav_exp <- ses(serie_de_tiempo, h = 15)
autoplot(Suav_exp) + autolayer(fitted(Suav_exp), series="Fitted")
# Instalar y cargar el paquete de suavizamiento exponencial
library(forecast)
# Crear una serie de tiempo con frecuencia diaria
serie_tiempof <- ts(datos_sumados$Calificación, frequency = 2)
mod1 <- HoltWinters(serie_tiempof, seasonal = "additive")
plot(mod1)
adf.test(diff(serie_tiempof))
adf.test(diff(serie_tiempof))
modeloARIMA<-auto.arima(diff(serie_tiempof),  seasonal = FALSE)
summary(modeloARIMA)
modelo_ARIMA <- arima(diff(serie_tiempof), order = c(0,0,2))
n_predicciones <- 10
modpredicciones <- predict(modelo_ARIMA, n.ahead = n_predicciones)
plot(diff(serie_tiempof) , main = "Serie Temporal predicción")
lines(modpredicciones$pred, col = "red", lty = 4)  # Línea de predicción
legend("topright", legend = "Predicción", col = "red", lty = 4)
inicio_zoom <- 300
fin_zoom <- 305
plot(diff(serie_tiempof), main = "Zoom Serie Temporal predicción", xlim = c(inicio_zoom, fin_zoom))
lines(modpredicciones$pred[inicio_zoom:fin_zoom], col = "red", lty = 4)
legend("topright", legend = "Predicción", col = "red", lty = 4)
inicio_zoom <- 292
fin_zoom <- 299
plot(diff(serie_tiempof), main = "Zoom Serie Temporal sin predicción", xlim = c(inicio_zoom, fin_zoom))
lines(modpredicciones$pred[inicio_zoom:fin_zoom], col = "red", lty = 4)
legend("topright", legend = "Predicción", col = "red", lty = 4)
plot(diff(serie_tiempof), main = "Serie Tiempo suavizada Winter Holters vs. Modelo ARIMA")
lines(fitted(modelo_ARIMA), col = "green",  lwd = 0.5)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(knitr)
library(ggplot2)
library(readxl)
library(lubridate)
library(fpp2)
library(zoo)
library(TTR)
library(tseries)
library(aTSA)
library(forecast)
vandalismo <- read_excel("vandalismo.xlsx")
Fecha <- seq(as.Date("2021-01-01"), as.Date("2022-10-26"), by = "days", each = 1)
datos_sumados <- aggregate(Calificación ~ Fecha, data = vandalismo, sum)
grafico <- ggplot(datos_sumados, aes(x = Fecha, y = Calificación)) +
geom_line() +    # Línea para conectar los puntos
geom_point() +   # Puntos en cada fecha
labs(x = "Fecha", y = "Número de Casos", title = "Casos de Vandalismo por Fecha") +
theme_bw()
print(grafico)
# Función de promedio móvil en un intervalo
promedio_movil <- function(datos_sumados, Calificación, intervalo) {
datos_sumados %>%
mutate(promedio = rollmean(Calificación, intervalo, fill = NA))
}
# Calcular promedio móvil con intervalo de 7 días
data_con_promedio <- promedio_movil(datos_sumados, "Calificación", 7)
knitr::kable(head(data_con_promedio, 50), caption = "Base de Datos Vandalismos FLOTA")
#data_con_promedio
# Gráfico de Aproximación en Promedio Móvil
ggplot() +
geom_line(data = datos_sumados, aes(x = Fecha, y = Calificación), color = "blue", linetype = "solid") +
geom_line(data = data_con_promedio, aes(x = Fecha, y = promedio), color = "red", linetype = "dashed") +
labs(title = "Aproximación en Promedio Móvil", x = "Fecha", y = "Valor") +
theme_minimal()
calcular_rezagos <- function(datos_sumados, Calificación, pasos) {
datos_sumados %>%
mutate(across(.cols = Calificación, .fns = list(lag = ~lag(., pasos)), .names = "{col}_lag{pasos}"))
}
# Calcular rezagos de 7 y 14 días
data_con_rezagos <- calcular_rezagos(datos_sumados, "Calificación", 7)
data_con_rezagos <- calcular_rezagos(data_con_rezagos, "Calificación_lag7", 7)
names(data_con_rezagos)
ggplot(data_con_rezagos, aes(x = Fecha)) +
geom_line(aes(y = Calificación, color = "black")) +
geom_line(aes(y = Calificación_lag7, color = "red")) +
labs(title = "Gráfico de Rezagos",
y = "Calificación",
color = "Leyenda") +
scale_color_manual(values = c("Valor original" = "black",
"Rezago 7 días" = "red")) +
theme_minimal()
# Graficar los resultados
ggplot() +
geom_line(data = datos_sumados, aes(x = Fecha, y = Calificación), color = "blue", linetype = "solid") +
geom_line(data = data_con_promedio, aes(x = Fecha, y = promedio), color = "red", linetype = "dashed") +
geom_line(data = data_con_rezagos, aes(x = Fecha, y = Calificación), color = "green", linetype = "dotted") +
geom_line(data = data_con_rezagos, aes(x = Fecha, y = Calificación_lag7), color = "orange", linetype = "dotted") +
labs(title = "Análisis de Variable en el Tiempo", x = "Fecha", y = "Calificación") +
theme_minimal()
# Realizar descomposición de la serie de tiempo
serie_de_tiempo <- ts(datos_sumados$Calificación, frequency = 240)
descomposicion <- decompose(serie_de_tiempo)
# Gráfico de la descomposición
plot(descomposicion)
# Verificar estacionalidad
adf_test <- adf.test(datos_sumados$Calificación)
print(adf_test)
plot(serie_de_tiempo)
abline(reg = lm(serie_de_tiempo ~ time(serie_de_tiempo)))
# Aplicar suavizamiento exponencial simple
modelo_suavizado <- HoltWinters(serie_de_tiempo, beta = FALSE, gamma = FALSE)
modelo_suavizado
Suav_exp <- ses(serie_de_tiempo, h = 15)
autoplot(Suav_exp) + autolayer(fitted(Suav_exp), series="Fitted")
# Instalar y cargar el paquete de suavizamiento exponencial
library(forecast)
# Crear una serie de tiempo con frecuencia diaria
serie_tiempof <- ts(datos_sumados$Calificación, frequency = 2)
mod1 <- HoltWinters(serie_tiempof, seasonal = "additive")
plot(mod1)
adf.test(diff(serie_tiempof))
adf.test(diff(serie_tiempof))
modeloARIMA<-auto.arima(diff(serie_tiempof),  seasonal = FALSE)
summary(modeloARIMA)
modelo_ARIMA <- arima(diff(serie_tiempof), order = c(0,0,2))
n_predicciones <- 10
modpredicciones <- predict(modelo_ARIMA, n.ahead = n_predicciones)
plot(diff(serie_tiempof) , main = "Serie Temporal predicción")
lines(modpredicciones$pred, col = "red", lty = 4)  # Línea de predicción
legend("topright", legend = "Predicción", col = "red", lty = 4)
inicio_zoom <- 300
fin_zoom <- 305
plot(diff(serie_tiempof), main = "Zoom Serie Temporal predicción", xlim = c(inicio_zoom, fin_zoom))
lines(modpredicciones$pred[inicio_zoom:fin_zoom], col = "red", lty = 4)
legend("topright", legend = "Predicción", col = "red", lty = 4)
inicio_zoom <- 292
fin_zoom <- 299
plot(diff(serie_tiempof), main = "Zoom Serie Temporal sin predicción", xlim = c(inicio_zoom, fin_zoom))
lines(modpredicciones$pred[inicio_zoom:fin_zoom], col = "red", lty = 4)
legend("topright", legend = "Predicción", col = "red", lty = 4)
plot(diff(serie_tiempof), main = "Serie Tiempo suavizada Winter Holters vs. Modelo ARIMA")
lines(fitted(modelo_ARIMA), col = "green",  lwd = 0.5)
residuales<-modelo_arima$residuals
qqnorm(residuales)
qqline(residuales)
shapiro.test(residuales)
ad.test(residuales)
install.packages("ADGofTest")
library(dplyr)
library(knitr)
library(ggplot2)
library(readxl)
library(lubridate)
library(fpp2)
library(zoo)
library(TTR)
library(tseries)
library(aTSA)
library(forecast)
library(ADGofTest)
ad.test(residuales)
resultado <- ad.test(residuales)
resultado <- ad.test(residuales)
shapiro.test(residuales)
ks.test(residuales)
resultado <- ks.test(residuales, "pnorm", mean(residuales), sd(residuales))
print(resultado)
resultado <- ks.test(residuales, "pnorm", mean(residuales), sd(residuales))
print(resultado)
